#Использовать logos
#Использовать fluent

Перем ФорматВерсий;
Перем Лог;

Процедура УстановитьФормат(Знач ФорматВерсийПоУмолчанию) Экспорт
	
	ФорматВерсий = ФорматВерсийПоУмолчанию;

КонецПроцедуры

Функция ВерсияИзФайла(Знач ПутьКФайлуВерсии) Экспорт
	
	ФайлВерсии = Новый Файл(ПутьКФайлуВерсии); 

	Если Не ФайлВерсии.Существует() Тогда
		ВызватьИсключение СтрШаблон("Переданный файл <%1> для чтения версии не существует", ПутьКФайлуВерсии)
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ПутьКФайлуВерсии, КодировкаТекста.UTF8);
	РезультатЧтения  = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат ВерсияИзСтроки(РезультатЧтения);

КонецФункции

Функция МаксимальнаяИзМассива(Знач МассивВерсий) Экспорт
	
	Если МассивВерсий.Количество() = 0 Тогда
		Возврат Новый Версия("0.0.0");
	КонецЕсли;
	
	Если МассивВерсий.Количество() = 1 Тогда
		Возврат МассивВерсий[0];
	КонецЕсли;

	Лог.Отладка("Выбираю максимум из [%1]", МассивВерсий.Количество());
	
	Коллекция = ПроцессорыКоллекций.ИзКоллекции(МассивВерсий);
	Результат = Коллекция.Максимум("Результат = Элемент1.Больше(Элемент2)");

	Возврат Результат;

КонецФункции

Функция ВерсияИзДиапазона(Знач СтрокаПроверяемаяВерсия, Знач СтрокаДиапазон)
	
	Диапазон = Новый ДиапазонВерсий(СтрокаДиапазон);

	Возврат Диапазон.ПроверитьВерсию(ВерсияИзСтроки(СтрокаПроверяемаяВерсия));

КонецФункции

Функция СтрокиВерсийВМассив(МассивСтрокВерсий)
	
	МассивВерсий = Новый Массив;

	Для каждого Строка Из МассивСтрокВерсий Цикл
		
		МассивВерсий.Добавить(НОвый Версия(Строка));

	КонецЦикла;

	Возврат МассивВерсий;

КонецФункции

Функция МаксимальнаяВерсияМежду(Знач МассивСтрокВерсий, ДиапазонСнизу, ДиапазонСверху = "*") Экспорт

	МассивВерсий = СтрокиВерсийВМассив(МассивСтрокВерсий);

	Лог.Отладка("Количетсво версий в массиве: %1", МассивВерсий.Количество());

	Если ЭтоПростоеСравнение(ДиапазонСнизу) 
		И (ЭтоПростоеСравнение(ДиапазонСверху)
		ИЛИ ДиапазонСверху = "*") Тогда
		
		ЛевыйДиапазон = Новый ДиапазонВерсий(ДиапазонСнизу);
		ПравыйДиапазон = Новый ДиапазонВерсий(ДиапазонСверху);

		ИтоговыйДиапазон = ЛевыйДиапазон;
		ИтоговыйДиапазон.ПравоеСравнение = ПравыйДиапазон.ЛевоеСравнение;

		Возврат ИтоговыйДиапазон.МаксимальнаяВерсияИЗВерсий(МассивВерсий);

	КонецЕсли;

	ДиапазонПроверкиСнизу = Новый ДиапазонВерсий(ДиапазонСнизу);

	МассивВерсийСнизу = ДиапазонПроверкиСнизу.ПроверитьВерсии(МассивВерсий);

	Лог.Отладка("После нижней границы >> версий в массиве: %1", МассивВерсийСнизу.Количество());

	ДиапазонПроверкиСверху = Новый ДиапазонВерсий(ДиапазонСверху);

	Возврат ДиапазонПроверкиСверху.МаксимальнаяВерсияИЗВерсий(МассивВерсийСнизу);

КонецФункции

Функция ЭтоПростоеСравнение(Знач ДиапазонСтрокой) Экспорт

	СимволыПростогоСравнения = ДоступныеСимволы().СимволыПростогоСравнения;

	МассивСимволов = СтрРазделить(СимволыПростогоСравнения, " ");

	Для каждого ЭлементМассива Из МассивСимволов Цикл

		Если СтрНачинаетсяС(ДиапазонСтрокой, ЭлементМассива) Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

Функция ВерсияИзСтроки(Знач СтрокаВерсии) Экспорт
	Возврат ПрочитатьВерсию(СтрокаВерсии);
КонецФункции

Функция СравнитьВерсии(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт

	Версия1 = ВерсияИзСтроки(СтрокаВерсия1);
	Версия2 = ВерсияИзСтроки(СтрокаВерсия2);
	
	Возврат Версия1.Сравнить(Версия2);
	
КонецФункции

Функция ВерсииРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = 0;
КонецФункции

Функция ВерсииНеРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат НЕ СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = 0;
КонецФункции

Функция ВерсияМеньше(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = -1;
КонецФункции

Функция ВерсияМеньшеИлиРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) <= 0;
КонецФункции

Функция ВерсияБольше(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) = 1;
КонецФункции

Функция ВерсияБольшеИлиРавны(Знач СтрокаВерсия1, Знач СтрокаВерсия2) Экспорт
	Возврат СравнитьВерсии(СтрокаВерсия1, СтрокаВерсия2) >= 0;
КонецФункции

Функция ПрочитатьВерсию(Знач СтрокаВерсии)
	
	КлассВерсия = Новый Версия(СтрокаВерсии, ФорматВерсий);

	Если КлассВерсия.Ошибка() Тогда
		ВызватьИсключение КлассВерсия.ПолучитьОписаниеОшибки();
	КонецЕсли;

	Возврат КлассВерсия;

КонецФункции

Функция УвеличитьВерсию(Знач ВходящаяВерсия, Знач Основная = Ложь, Знач Второстепенная = Ложь, Знач Патч = Истина ) Экспорт

	ВозвратСтроки = Ложь;
	
	Лог.Отладка("УвеличитьВерсию: тип входящей версии %1, %2, %3, %4", ВходящаяВерсия, Основная, Второстепенная, Патч);
	Если Тип("Строка") = ТипЗнч(ВходящаяВерсия) Тогда
		ВозвратСтроки = Истина;
		ВходящаяВерсия = ПрочитатьВерсию(ВходящаяВерсия);
	КонецЕсли;

	Если Основная Тогда
		
		ВходящаяВерсия.Основная = ВходящаяВерсия.Основная + 1;
		ВходящаяВерсия.Второстепенная = 0;
		ВходящаяВерсия.Патч = 0;

	ИначеЕсли Второстепенная Тогда
		
		ВходящаяВерсия.Второстепенная = ВходящаяВерсия.Второстепенная + 1;
		ВходящаяВерсия.Патч = 0;
	
	ИначеЕсли Патч Тогда
	
		ВходящаяВерсия.Патч = ВходящаяВерсия.Патч + 1;
	
	КонецЕсли;

	Если ВозвратСтроки Тогда
		Возврат ВходящаяВерсия.ВСтроку();
	КонецЕсли;

	Возврат ВходящаяВерсия;

КонецФункции

Функция УвеличитьОсновнуюВерсию(Знач ВходящаяВерсия) Экспорт
	возврат УвеличитьВерсию( ВходящаяВерсия, Истина);	
КонецФункции

Функция УвеличитьВторостепеннуюВерсию(Знач ВходящаяВерсия) Экспорт
	возврат УвеличитьВерсию( ВходящаяВерсия, Ложь, Истина);	
КонецФункции

Функция УвеличитьВерсиюПатча(Знач ВходящаяВерсия) Экспорт
	возврат УвеличитьВерсию( ВходящаяВерсия, Ложь, Ложь, Истина);	
КонецФункции


Функция ДоступныеСимволы() Экспорт

	СтруктураСимволов = Новый Структура();
	СтруктураСимволов.Вставить("Тире","-");
	СтруктураСимволов.Вставить("ЛюбойСимвол","* Х х");
	СтруктураСимволов.Вставить("Тильда","~");
	СтруктураСимволов.Вставить("Каретка","^");
	СтруктураСимволов.Вставить("СимволыПростогоСравнения", ">= <= = > < ");

	Возврат СтруктураСимволов;

КонецФункции

ФорматВерсий = "0.0.0";

Лог = Логирование.ПолучитьЛог("oscript.lib.semver");
