#Использовать strings
#Использовать logos

Перем Лог;

Перем Основная Экспорт; // Число
Перем Второстепенная Экспорт; // Число
Перем Патч Экспорт; // число

Перем ПреРелиз Экспорт; // Массив
Перем НомерБилда Экспорт; // Массив;
Перем ОшибкаЧтенияВерсии Экспорт;

Перем ФорматВерсии; 

Процедура ПриСозданииОбъекта(Знач ВерсияСтрокой, ВходящийФорматВерсии = "0.0.0")

	Основная = 0;
	Второстепенная = 0;
	Патч = 0;
	ФорматВерсии = "0.0.0";//ВходящийФорматВерсии;
	ПреРелиз = Новый Массив;

	Прочитать(ВерсияСтрокой);

	//Сообщить(ВерсияСтрокой + " > " + ВСтроку()+ " << "+ПолучитьОписаниеОшибки());

КонецПроцедуры

Функция Ошибка() Экспорт
	
	Возврат Не ПустаяСтрока(ОшибкаЧтенияВерсии);

КонецФункции

Функция ПолучитьОписаниеОшибки() Экспорт
	Возврат ОшибкаЧтенияВерсии;
КонецФункции

Функция ВСтроку() Экспорт

	Возврат ВСтрокуПоФормату(ФорматВерсии);
	
КонецФункции

Функция ВСтрокуПоФормату(Знач НужныйФорматВерсии) Экспорт
	
	МассивФормата = СтрРазделить(НужныйФорматВерсии, ".");

	СтрокаОсновнаяВерсия = СтроковыеФункции.ДополнитьСтроку(Строка(Основная), СтрДлина(МассивФормата[0]));
	СтрокаВторостепеннаяВерсия = СтроковыеФункции.ДополнитьСтроку(Строка(Второстепенная), СтрДлина(МассивФормата[1]));
	СтрокаПатча = СтроковыеФункции.ДополнитьСтроку(Строка(Патч), СтрДлина(МассивФормата[2]));
	

	СтрокаВерсии = СтрШаблон("%1.%2.%3", СтрокаОсновнаяВерсия, СтрокаВторостепеннаяВерсия, СтрокаПатча);

	Возврат СтрокаВерсии;
	
КонецФункции

Процедура Прочитать(Знач ВерсияСтрокой)
	
	Если СтрДлина(ВерсияСтрокой) = 0 Тогда
		ОшибкаЧтенияВерсии = "Длина строки версии 0";
		Возврат; 
	КонецЕсли;

	ВерсияСтрокой = ПодготовитьКЧтению(ВерсияСтрокой);

	МассивСтрокВерсии = СтрРазделить(ВерсияСтрокой, ".");
	
	Если МассивСтрокВерсии.Количество() < 3 Тогда
		ОшибкаЧтенияВерсии = "Не найдены все составляющие версии";
		Возврат; 
	КонецЕсли;

	СтрокаОсновнаяВерсия = МассивСтрокВерсии[0];

	Если Не СтроковыеФункции.ТолькоЦифрыВСтроке(СтрокаОсновнаяВерсия) Тогда
	
		ОшибкаЧтенияВерсии = СтрШаблон("Основная версия <%1> должна содержать только цифры",СтрокаОсновнаяВерсия);
		Возврат; 
	
	КонецЕсли;

	// Если СтрНачинаетсяС(СтрокаОсновнаяВерсия, "0") Тогда
	// 	ОшибкаЧтенияВерсии = СтрШаблон("Основная версия <%1> не должна начитаться с 0",СтрокаОсновнаяВерсия);
	// 	Возврат; 
	// КонецЕсли;

	Основная = Число(СтрокаОсновнаяВерсия);
	
	СтрокаВторостепеннаяВерсия = МассивСтрокВерсии[1];


	Если Не СтроковыеФункции.ТолькоЦифрыВСтроке(СтрокаВторостепеннаяВерсия) Тогда
	
		ОшибкаЧтенияВерсии = СтрШаблон("Второстепенная версия <%1> должна содержать только цифры",СтрокаОсновнаяВерсия);
		Возврат; 
	
	КонецЕсли;

	Второстепенная = Число(СтрокаВторостепеннаяВерсия);

	СтрокаПатчаВерсии = МассивСтрокВерсии[2];

	Если Не СтроковыеФункции.ТолькоЦифрыВСтроке(СтрокаПатчаВерсии) Тогда
	
		ОшибкаЧтенияВерсии = СтрШаблон("Версия патча <%1> должна содержать только цифры",СтрокаОсновнаяВерсия);
		Возврат; 
	
	КонецЕсли;

	Патч = Число(СтрокаПатчаВерсии);

КонецПроцедуры

Функция ПодготовитьКЧтению(Знач СтрокаВерсии)
	
	Если СтрНачинаетсяС(СтрокаВерсии, "v") Тогда
		СтрокаВерсии = СтрЗаменить(СтрокаВерсии, "v", "");
	КонецЕсли;

	МассивСтрокВерсии = СтрРазделить(СтрокаВерсии, ".");

	КоличествоДобавления = 3 - МассивСтрокВерсии.Количество();

	Для ИИ = 1 ПО КоличествоДобавления Цикл
		МассивСтрокВерсии.Добавить(0);
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрокВерсии, ".");

КонецФункции

Функция Сравнить(Знач ВходящаяВерсия) Экспорт
	
	Лог.Отладка("Класс входящей версии %1", ВходящаяВерсия);
	
	Если НЕ Основная = ВходящаяВерсия.Основная Тогда
		
		Возврат ?(Основная > ВходящаяВерсия.Основная,1,-1);

	КонецЕсли;

	Если НЕ Второстепенная = ВходящаяВерсия.Второстепенная Тогда
		
		Возврат ?(Второстепенная > ВходящаяВерсия.Второстепенная,1,-1);

	КонецЕсли;

	Если НЕ Патч = ВходящаяВерсия.Патч Тогда
		
		Возврат ?(Патч > ВходящаяВерсия.Патч,1,-1);

	КонецЕсли;

	Если ПреРелиз.Количество() = 0 
		И ВходящаяВерсия.ПреРелиз.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Если ПреРелиз.Количество() = 0 
		И ВходящаяВерсия.ПреРелиз.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Если ПреРелиз.Количество() = 0 
		И ВходящаяВерсия.ПреРелиз.Количество() > 1 Тогда
		Возврат 1;
	КонецЕсли;

	Если ПреРелиз.Количество() > 0 
		И ВходящаяВерсия.ПреРелиз.Количество() = 0 Тогда
		Возврат -1;
	КонецЕсли;

	Возврат 0;
	
КонецФункции

Функция Равны(Знач ВходящаяВерсия) Экспорт
	Возврат Сравнить(ВходящаяВерсия) = 0;
КонецФункции

Функция НеРавны(Знач ВходящаяВерсия) Экспорт
	Возврат НЕ Сравнить(ВходящаяВерсия) = 0;
КонецФункции

Функция Меньше(Знач ВходящаяВерсия) Экспорт
	Возврат Сравнить(ВходящаяВерсия) = -1;
КонецФункции

Функция МеньшеИлиРавны(Знач ВходящаяВерсия) Экспорт
	Возврат Сравнить(ВходящаяВерсия) <= 0;
КонецФункции

Функция Больше(Знач ВходящаяВерсия) Экспорт
	//Сообщить(ВСтроку() + " > " + ВходящаяВерсия.ВСтроку());
	Возврат Сравнить(ВходящаяВерсия) = 1;
КонецФункции

Функция БольшеИлиРавны(Знач ВходящаяВерсия) Экспорт
	Возврат Сравнить(ВходящаяВерсия) >= 0;
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.semver_version");
